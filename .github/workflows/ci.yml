name: CI

# do not run workflow twice on PRs
on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - uses: actions/cache@v2.1.5
        name: Cache Cargo.toml
        with:
          path: |
            target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
              ${{ runner.os }}-key

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path ./Cargo.toml
      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-targets --manifest-path ./Cargo.toml

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path ./Cargo.toml -- --check

      - name: Clippy Check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path ./Cargo.toml --all-features

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --manifest-path ./Cargo.toml

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path ./Cargo.toml

      - name: Publish Documentation
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
          publish_dir: target/doc

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Install gtest manually
        run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

      - name: Install cbindgen manually
        run: cargo install cbindgen

      - name: Produce header files
        run: RUSTC_BOOTSTRAP=1 cbindgen ./ --config cbindgen.toml --crate atms --output target/include/atms.h

      - name: Build C test
        run: clang -x c++ tests.c atms.c multi_sig.c serialisation.c -g -o tests -L ../target/release -latms -lpthread -lstdc++ -lgtest -lgtest_main
        working-directory: c-tests

      - name: Run C test
        run: LD_LIBRARY_PATH=../target/release ./tests --gtest_output=xml:test-results.xml
        working-directory: c-tests